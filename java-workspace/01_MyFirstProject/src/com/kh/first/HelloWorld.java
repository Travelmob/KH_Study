package com.kh.first; // 패키지 선언부 : 현재 클래스의 위치

	/*
	 * 주석문
	 * 
	 * 주석은 프로그램 실행에 영향을 끼치지 않음
	 * 코드를 작성한 후 코드를 이해하기 쉽도록 하기 위해 작성
	 * 주석을 달아놓으면 유지보수 시간을 줄일 수 있음
	 */

	// 주석의 종류
	// 1. 한 줄 주석(//) : 주석 내용이 한 줄 일 때 사용
	// "//" 다음부터 줄의 끝까지 내용이 주석으로 간주
	// 2. 여러 줄 주석(/* ~~~~ */) : 여러 줄의 주석이 필요할 때 사용
	// /* ~~~~~~ */ 사이의 모든 내용이 주석으로 간주

	/*
	 * 패키지
	 * 
	 * 하나의 패키지 안에 여러 클래스들이 존재할 수 있음
	 * 단, 동일한 이름의 클래스는 존재할 수 없음
	 * 
	 * 모든 클래스들을 동일한 패키지안에 집어넣고 관리하면 관리가 힘들기 때문에,
	 * 클래스들을 용도에 맞게 구분해서 패키지에 보관하는 것이 좋다.
	 * 
	 * 권장사항
	 * 
	 * 패키지는 적어도 세단계 이상으로 만들어주는것을 권장한다.
	 * com.kh.first
	 * 
	 * com.회사이름.프로젝트이름, 팀이름, 카테고리명(마지막은 절대 유일 필요)
	 * 
	 */

public class HelloWorld { // 클래스 이름은 HelloWorld라고 지었음, 파일명과 동일해야 한다, 보라색은 예약어, { Scope }
	
	// 블록(Scope)은 중괄호로 묶은 부분을 말하며, 복합문을 구석하는 요소입니다.
	// 즉, 종속된 문장이 다수 개일때 '{'로 시작하고 '}'로 닫습니다.
	
	// main method() : 프로그램의 시작점, 프로그램당 최소 1개는 가지고 있어야한다.
	
	public static void main(String[] args) { //main method 영역 시작
		
		// * Method : 사전적으로는 기능을 의미, 하나의 기능단위
		// 하나의 클래스 안에 여러개의 메서드가 존재할 수 있음
		// 메서드를 사용할 때 "호출"이라고 한다.
		
		// 공백은 빈 칸, 탭문자, 빈 줄 등이 있으며, 이러한 공백은 소스코드를 보기 좋게
		// 하고 알아보기 쉽게 만드는데 사용합니다.
		// 즉, 프로그램을 구조화된 형태로 표현하는데 유용합니다.
		
		// * 세미콜론(;) : 논리적인 한 문장이 끝날 때 반드시 세미콜론을 붙임.
		
		printMyName();
		
		System.out.println("안녕하세요 여러분!"); // 얘는 출력문
		
		// printMyName();
		
	} // main method 영역 끝
	
	public static void printMyName() { // printMyname 메서드 시작
		
		// 안녕하세요. 제 이름은 전태영입니다.
		System.out.println("안녕하세요. 제 이름은 전태영입니다");
		
	} // printMyName 메서드 영역 끝
	
} // HelloWorld 클래스 영역 끝!